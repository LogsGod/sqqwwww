import asyncio
import logging
import config




from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram.filters import Command
from aiogram import F
from aiogram.types import Message
from aiogram.filters import Command, CommandObject, CommandStart
from aiogram.enums import ParseMode
from config import TOKEN




# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)
# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(token=TOKEN)
# –î–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher()




# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@dp.message(Command("start"))
async def cmd_start(message: Message):
    
    kb = [
        [types.KeyboardButton(text="—Å–∫–∞–∑–∞—Ç—å Satoru")]

    ]

    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)


#–§—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ä—Ç –∫–æ—Ç–æ—Ä–∞—è –¥–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≤—ã–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É –∫–æ—Ç–æ—Ä–∞—è —É–∫–∞–∑–∞–Ω–∞—è –≤—ã—à–µ
    await message.answer(
        f"Hello, <b>{message.from_user.full_name}</b>,",
        parse_mode=ParseMode.HTML,
        reply_markup=keyboard
    )


@dp.message(F.text.lower() == "—Å–∫–∞–∑–∞—Ç—å satoru")
async def with_puree(message: types.Message):

    username = message.from_user.username


    await message.reply("–ü–∏—Å—é–Ω—å–∫–∞–π", reply_markup=types.ReplyKeyboardRemove())
     # Send a message to yourself with the user's username
    await bot.send_message(chat_id=1079856563, text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å https://t.me/{username} —Ö–æ—á–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏.")
    
    # Send a reply message to the user
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∑–∞—è–≤–∫—É, –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –º—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è.")



# @dp.message()
# async def echo_handler(message: types.Message) -> None:
#     """
#     Handler will forward receive a message back to the sender

#     By default, message handler will handle all message types (like a text, photo, sticker etc.)
#     """
#     try:
#         # Send a copy of the received message
#         await message.send_copy(chat_id=message.chat.id)
#     except TypeError:
#         # But not all the types is supported to be copied so need to handle it
#         await message.answer("Nice try!")

@dp.message(Command("help"))

async def cmd_help(message: types.Message):
     await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ —Å Sosoiwb")
     await message.answer("–î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –Ω–∞–ø–∏—Å–∞—Ç—å –µ–º—É —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è /start ")

     await message.bot.send_dice(chat_id=message.chat.id , emoji='üé≤')



@dp.message(Command("send"))
async def cmd_start(message: types.Message):


    # Obtain the user's username from the message
    username = message.from_user.username
    
    # Send a message to yourself with the user's username
    await bot.send_message(chat_id=1079856563, text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å https://t.me/ {username} —Ö–æ—á–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏.")
    
    # Send a reply message to the user
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∑–∞—è–≤–∫—É, –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –º—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è.", reply_markup=kb)


# –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())